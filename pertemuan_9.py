# -*- coding: utf-8 -*-
"""Pertemuan 9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CD1WHeZD-Kv7vaVqjnMktshwRM0H8vyP
"""

import numpy as np


adjacency_matrix = np.array ([[0, 1, 0, 0],
                              [0, 0, 1, 0],
                              [0, 1, 0, 1],
                              [1, 0, 1, 0]])


damping_factor = 0.85


num_pages = len(adjacency_matrix)
page_rank = np.ones(num_pages) / num_pages


num_iterations = 100

num_iterations = 100
for i in range(num_iterations):
  new_page_rank = np.zeros(num_pages)
  for j in range(num_pages):
    # Calculate the PageRank contribution from each linking page
    linking_pages = [k for k in range(num_pages) if adjacency_matrix[k, j] == 1]
    for linking_page in linking_pages:
      new_page_rank[j] += page_rank[linking_page] / sum(adjacency_matrix[linking_page, :])
    new_page_rank[j] = damping_factor * new_page_rank[j] + (1 - damping_factor) / num_pages
  page_rank = new_page_rank

#  Print the final PageRank values
for page, rank in enumerate(page_rank):
  print(f"PR(Page {page + 1}) = {rank:.3f}")

import numpy as np
import networkx as nx
import matplotlib.pyplot as plt

adjacency_matrix = np.array ([[0, 1, 0, 0],
                              [0, 0, 1, 0],
                              [0, 1, 0, 1],
                              [1, 0, 1, 0]])

G = nx.DiGraph()


num_pages = len(adjacency_matrix)
G.add_nodes_from(range(num_pages))

for i in range(num_pages):
  for j in range(num_pages):
    if adjacency_matrix[i, j] == 1:
      G.add_edge(i, j)

pos = nx.spring_layout(G)
labels = {i: f"Page {i+1}" for i in range(num_pages)}
nx.draw(G, pos, with_labels=True, labels=labels, node_size=1000, node_color='lightblue', font_size=10, font_color="black", font_weight="bold", arrowsize=20)
plt.title("PageRank Example Graph")
plt.show()

import networkx as nx
import numpy as np

def CreatePageRank(aGraph):
  nodes_set = len(aGraph)
  M = nx.to_numpy_array(aGraph)
  outwards = np.squeeze(np.asarray(np.sum(M, axis=1)))
  prob_outwards = np.array(1.0 / outwards)
  G = np.multiply(M, prob_outwards[:, np.newaxis])

  p = np.ones(nodes_set) / float(nodes_set)
  return G, p

myweb = nx.DiGraph()
connections = [(1, 3), (2, 1), (2, 3), (3, 1), (3, 2), (3, 4), (4, 5), (5, 1), (5, 4)]
myweb.add_edges_from(connections)

G, p = CreatePageRank(myweb)
print(G)

import numpy as np


adjacency_matrix = np.array ([[0, 1, 1, 1, 0],
                              [0, 0, 1, 0, 0],
                              [1, 0, 0, 0, 0],
                              [0, 1, 0, 0, 1],
                              [0, 0, 1, 1, 0]])


pagerank = np.array([1, 1, 1, 1, 1], dtype=float)


dumping_factor = 0.85


num_iterations = 100

for _ in range(num_iterations):

  new_pagerank = np.zeros(pagerank.shape, dtype=float)

  for i in range(adjacency_matrix.shape[0]):
    for j in range(adjacency_matrix.shape[1]):
        num_outlinks = np.sum(adjacency_matrix[i, :])
        if num_outlinks > 0:
            new_pagerank[j] += (damping_factor * pagerank[i] / num_outlinks)

  new_pagerank += (1 - damping_factor) / len(pagerank)
  pagerank = new_pagerank

print("Hasil PageRank:")
print(pagerank)

import numpy as np

num_pages = 5

outlinks = np.array([3, 2, 1, 2, 2])

inlinks = np.array([1, 2, 1, 2, 1])

pagerank = np.ones(num_pages, dtype=float) / num_pages

damping_factor = 0.85

num_iterations = 100

for _ in range(num_iterations):
  new_pagerank = np.zeros(num_pages, dtype=float)

  for i in range(num_pages):
    for j in range(num_pages):
      if i != j and outlinks[j] > 0:
        new_pagerank[i] += damping_factor * (pagerank[j] / outlinks[j])

  pagerank = (1 - damping_factor) / num_pages + new_pagerank

print("Hasil PageRank:")
for i, pr in enumerate(pagerank):
  print(f"Halaman {chr(ord('A') + i)}: {pr:.4f}")

# Latihan

def PageRank(array):
  adjacency_matrix = np.array (array)

  damping_factor = 0.85

  num_pages = len(adjacency_matrix)
  page_rank = np.ones(num_pages) / num_pages

  num_iterations = 100

  for i in range(num_iterations):
    new_page_rank = np.zeros(num_pages)
    for j in range(num_pages):
      linking_pages = [k for k in range(num_pages) if adjacency_matrix[k, j] == 1]
      for linking_page in linking_pages:
        new_page_rank[j] += page_rank[linking_page] / sum(adjacency_matrix[linking_page, :])
      new_page_rank[j] = damping_factor * new_page_rank[j] + (1 - damping_factor) / num_pages
    page_rank = new_page_rank

  for page, rank in enumerate(page_rank):
    print(f"PR(Page {page + 1}) = {rank:.3f}")

# Latihan

def GraphAdjacencyMatrix(array):
  adjacency_matrix = np.array (array)

  G = nx.DiGraph()

  num_pages = len(adjacency_matrix)
  G.add_nodes_from(range(num_pages))

  for i in range(num_pages):
    for j in range(num_pages):
      if adjacency_matrix[i, j] == 1:
        G.add_edge(i, j)

  pos = nx.spring_layout(G)
  labels = {i: f"Page {i+1}" for i in range(num_pages)}
  nx.draw(G, pos, with_labels=True, labels=labels, node_size=1000, node_color='lightblue', font_size=10, font_color="black", font_weight="bold", arrowsize=20)
  plt.title("PageRank Graph")
  plt.show()

# Lat 1

matrix1 = ([[0, 1, 0, 0, 0, 0],
            [0, 0, 1, 0, 0, 0],
            [0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 1, 0],
            [0, 0, 0, 0, 0, 1],
            [0, 0, 0, 0, 0, 0]])

connections1 = (1, 2), (2, 3), (3, 4), (4, 5), (5, 6)

PageRank(matrix1)

GraphAdjacencyMatrix(matrix1)

# Lat 2

matrix2 = ([[0, 1, 0, 0, 0],
            [0, 0, 1, 0, 0],
            [0, 0, 0, 1, 0],
            [0, 0, 0, 0, 1],
            [1, 0, 0, 0, 0]])

connections1 = (1, 2), (2, 3), (3, 4), (4, 5), (5, 1)

PageRank(matrix2)

GraphAdjacencyMatrix(matrix2)

# Lat 3

matrix3 = ([[0, 1, 0, 0],
            [1, 0, 1, 0],
            [0, 1, 0, 1],
            [0, 0, 1, 0]])

connections1 = (1, 2), (2, 1), (2, 3), (3, 2), (3, 4), (4, 3)

PageRank(matrix3)

GraphAdjacencyMatrix(matrix3)

# Lat 4

matrix4 = ([[0, 1, 0, 0, 0, 0],
            [0, 0, 1, 0, 0, 0],
            [0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 1, 0],
            [0, 0, 0, 0, 0, 1],
            [1, 0, 0, 0, 0, 0]])

connections1 = (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 1)

PageRank(matrix4)

GraphAdjacencyMatrix(matrix4)

# Lat 5

matrix5 = ([[0, 1, 0, 0],
            [1, 0, 1, 0],
            [0, 1, 0, 1],
            [1, 0, 1, 0]])

connections1 = (1, 2), (2, 1), (2, 3), (3, 2), (3, 4), (4, 1), (4, 3)

PageRank(matrix5)

GraphAdjacencyMatrix(matrix5)

# Lat 6
matrix6 = [[0, 1, 0, 0, 0],
          [0, 0, 1, 0, 0],
          [0, 0, 0, 1, 0],
          [1, 0, 0, 0, 1],
          [1, 0, 0, 0, 0]]

connections6 = (1, 2), (2, 3), (3, 4), (4, 1), (4, 5), (5, 1)

PageRank(matrix6)

GraphAdjacencyMatrix(matrix6)

# Lat 7
matrix7 = [[0, 1, 0, 1, 1],
          [0, 0, 1, 0, 0],
          [0, 0, 0, 1, 0],
          [1, 0, 0, 0, 1],
          [1, 0, 0, 0, 0]]

connections7 = (1, 2), (1, 4), (1, 5), (2, 3), (3, 4), (4, 1), (4, 5), (5, 1)

PageRank(matrix7)

GraphAdjacencyMatrix(matrix7)

"""1. Pemilihan pemimpin sosial dan pemimpin politik: Algoritme PageRank dapat digunakan untuk mengidentifikasi individu yang memiliki pengaruh besar dalam  komunitas atau arena politik.
 Dengan menganalisis jejaring sosial dan interaksinya, kita dapat melihat siapa yang memiliki hubungan  kuat dan audiens yang besar.
 Hal ini dapat membantu memilih pemimpin yang benar-benar mewakili keinginan dan kebutuhan masyarakat.

2. Penyebaran informasi dan kesadaran masyarakat: Dalam konteks informasi dan kesadaran sosial, PageRank dapat membantu mengidentifikasi sumber informasi yang paling dapat dipercaya dan berpengaruh.
 Hal ini penting untuk memerangi penyebaran berita palsu (hoaks) dan memastikan  informasi yang sah dan bermanfaat sampai ke masyarakat.

"""